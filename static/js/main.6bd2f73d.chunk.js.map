{"version":3,"sources":["utils/callServices.js","components/character/character.js","components/filter/filter.js","components/leading/leading.js","components/buttons/buttons.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["header","getData","url","axios","get","then","response","JSON","parse","stringify","data","catch","error","Character","id","name","image","species","gender","className","key","loading","src","alt","Filter","dispatch","useDispatch","type","onChange","event","payload","target","value","htmlFor","Leading","characterList","useSelector","state","useEffect","result","map","Bottons","characterInfo","next","onClick","prev","store","createStore","action","results","characterFilteredOrigin","info","characterListByName","filter","character","toLowerCase","includes","characterFiltered","App","M","AutoInit","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6bd2f73d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n /**\r\n  *   SE CREA CONSTANTE PARA ENVIAR LAS CABECERAS A LOS METODOS DE AXIOS\r\n  */\r\nconst header = {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json',\r\n    'Origin':'*'\r\n}\r\n\r\n/** FUNCION PARA INVOCAR METODOS MEDIANTE METODO GET\r\n * \r\n * @param {*} url \r\n */\r\nexport function getData(url) {\r\n    return axios.get(url,header)\r\n    .then(response => {\r\n        return JSON.parse(JSON.stringify(response.data));\r\n    })\r\n    .catch(error =>{\r\n        return JSON.parse(JSON.stringify(error));\r\n    });\r\n}\r\n","import React from 'react'\r\n\r\nfunction Character({id, name, image, species, gender}) {\r\n  return (\r\n    <div className=\"col s12 m6 l4 xl4\" key={id}>\r\n        <div className=\"card\">\r\n            <div className=\"card-image waves-effect waves-block waves-light\">\r\n                <img className=\"activator\" loading=\"lazy\" src={image} alt=\"\"/>\r\n            </div>\r\n            <div className=\"card-content\">\r\n                <span className=\"card-title activator grey-text text-darken-4\">{name}<i className=\"material-icons right\">more_vert</i></span>\r\n            </div>\r\n            <div className=\"card-reveal\">\r\n                <span className=\"card-title grey-text text-darken-4\">{name}<i className=\"material-icons right\">close</i></span>\r\n                <p>Gender:  {gender}</p>\r\n                <p>Species:  {species}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Character\r\n","import React from 'react';\r\nimport './filter.scss';\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\n\r\n\r\nexport default function Filter() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleInputChange = (event) =>{\r\n        dispatch({\r\n            type: 'SET_CHARACTER_NAME',\r\n            payload: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"row filter\">\r\n        <div className=\"col s8 offset-s2 container filter-content z-depth-3\">\r\n            <div className=\"input-field\">\r\n            <i className=\"material-icons prefix\">search</i>\r\n            <input id=\"autocomplete\" type=\"text\" name=\"autocomplete\" className=\"autocomplete\" onChange={handleInputChange}/>\r\n            <label htmlFor=\"autocomplete\">Busqueda</label>\r\n            </div>        \r\n        </div>\r\n    </div>\r\n  );\r\n}","import React, { useEffect } from 'react';\r\nimport './leading.scss';\r\nimport {getData, } from '../../utils/callServices';\r\nimport Character from '../character/character';\r\nimport Filter from '../filter/filter';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n\r\n\r\nexport default function Leading() {\r\n\r\n    const dispatch = useDispatch()\r\n    const characterList = useSelector((state) => state.characterList)\r\n\r\n    useEffect(() => {\r\n        getData(\"https://rickandmortyapi.com/api/character/\").then(result =>{\r\n            if(result!==null){\r\n                dispatch({\r\n                    type: 'SET_CHARACTER_LIST',\r\n                    payload: result\r\n                })\r\n            }\t      \r\n        });\r\n\r\n    }, [dispatch])\r\n\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n        <Filter/>\r\n        <div className=\"row\">\r\n            <div className=\"col s10 offset-s1 container z-depth-3\">\r\n                {\r\n                    characterList.map(({id, name, image, species, gender}) => {\r\n                        return(\r\n                            <div key={id}>\r\n                            <Character\r\n                            id = {id}\r\n                            name = {name}\r\n                            image = {image}\r\n                            species = {species}\r\n                            gender = {gender}\r\n                            />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    </header>\r\n  );\r\n}","import React from 'react';\r\nimport './buttons.scss';\r\nimport {getData, } from '../../utils/callServices';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n\r\nexport default function Bottons() {\r\n\r\n    const characterInfo = useSelector((state) => state.characterInfo)\r\n    const dispatch = useDispatch()\r\n\r\n    const getCharacteresNext = () =>{\r\n        getData(characterInfo.next).then(result =>{\r\n            if(result!==null){\r\n                dispatch({\r\n                    type: 'SET_CHARACTER_LIST',\r\n                    payload: result\r\n                })\r\n            }\t      \r\n        });\r\n    }\r\n\r\n    const getCharacteresPrev = () =>{\r\n        getData(characterInfo.prev).then(result =>{\r\n            if(result!==null){\r\n                dispatch({\r\n                    type: 'SET_CHARACTER_LIST',\r\n                    payload: result\r\n                })\r\n            }\t      \r\n        });\r\n    }\r\n    \r\n\r\n  return (\r\n      <div>\r\n        { characterInfo.next !== null ? <p className=\"btn-floating btn-large waves-effect waves-light cyan right btn-right\" onClick={getCharacteresNext}><i className=\"material-icons\">chevron_right</i></p> : \"\" }\r\n        { characterInfo.prev !== null ? <p className=\"btn-floating btn-large waves-effect waves-light cyan left btn-left\" onClick={getCharacteresPrev}><i className=\"material-icons\">chevron_left</i></p>: \"\" }\r\n      </div>\r\n\r\n  );\r\n}","import React from 'react';\nimport './App.scss';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport M from \"materialize-css\";\nimport Leading from \"./components/leading/leading\";\nimport Bottons from \"./components/buttons/buttons\";\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport reducer from './reducer'\n\n\nconst initialState = {\n  characterList: [],\n  characterFiltered: [],\n  characterFilteredOrigin: [],\n  characterInfo: []\n}\n\nconst store = createStore(reducer ,initialState)\n\nfunction App() {\n  M.AutoInit();\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"header-background\"></div>\n        <Bottons/>\n        <Switch>\n          <Route exact path=\"\" component={Leading} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","export default function reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_CHARACTER_LIST':{\r\n          return {...state, characterList: action.payload.results, characterFilteredOrigin: action.payload.results, characterInfo: action.payload.info}\r\n        }\r\n        case 'SET_CHARACTER_NAME':{\r\n          const characterListByName = state.characterFilteredOrigin.filter(character => character.name.toLowerCase().includes(action.payload.toLowerCase()))\r\n          return { ...state, characterList: characterListByName }\r\n        }\r\n        default: {\r\n          return state\r\n        } \r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}